#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

module Mesos
  # forward declarations
  class FrameworkID < ::ProtocolBuffers::Message; end
  class OfferID < ::ProtocolBuffers::Message; end
  class SlaveID < ::ProtocolBuffers::Message; end
  class TaskID < ::ProtocolBuffers::Message; end
  class ExecutorID < ::ProtocolBuffers::Message; end
  class FrameworkInfo < ::ProtocolBuffers::Message; end
  class CommandInfo < ::ProtocolBuffers::Message; end
  class ExecutorInfo < ::ProtocolBuffers::Message; end
  class MasterInfo < ::ProtocolBuffers::Message; end
  class SlaveInfo < ::ProtocolBuffers::Message; end
  class Value < ::ProtocolBuffers::Message; end
  class Attribute < ::ProtocolBuffers::Message; end
  class Resource < ::ProtocolBuffers::Message; end
  class ResourceStatistics < ::ProtocolBuffers::Message; end
  class ResourceUsage < ::ProtocolBuffers::Message; end
  class Request < ::ProtocolBuffers::Message; end
  class Offer < ::ProtocolBuffers::Message; end
  class TaskInfo < ::ProtocolBuffers::Message; end
  class TaskStatus < ::ProtocolBuffers::Message; end
  class Filters < ::ProtocolBuffers::Message; end
  class Environment < ::ProtocolBuffers::Message; end
  class Parameter < ::ProtocolBuffers::Message; end
  class Parameters < ::ProtocolBuffers::Message; end

  # enums
  module Status
    include ::ProtocolBuffers::Enum
    DRIVER_NOT_STARTED = 1
    DRIVER_RUNNING = 2
    DRIVER_ABORTED = 3
    DRIVER_STOPPED = 4
  end

  module TaskState
    include ::ProtocolBuffers::Enum
    TASK_STAGING = 6
    TASK_STARTING = 0
    TASK_RUNNING = 1
    TASK_FINISHED = 2
    TASK_FAILED = 3
    TASK_KILLED = 4
    TASK_LOST = 5
  end

  class FrameworkID < ::ProtocolBuffers::Message
    required :string, :value, 1
  end

  class OfferID < ::ProtocolBuffers::Message
    required :string, :value, 1
  end

  class SlaveID < ::ProtocolBuffers::Message
    required :string, :value, 1
  end

  class TaskID < ::ProtocolBuffers::Message
    required :string, :value, 1
  end

  class ExecutorID < ::ProtocolBuffers::Message
    required :string, :value, 1
  end

  class FrameworkInfo < ::ProtocolBuffers::Message
    required :string, :user, 1
    required :string, :name, 2
    optional ::Mesos::FrameworkID, :id, 3
    optional :double, :failover_timeout, 4, :default => 0
    optional :bool, :checkpoint, 5, :default => false
    optional :string, :role, 6, :default => "*"
  end

  class CommandInfo < ::ProtocolBuffers::Message
    # forward declarations
    class URI < ::ProtocolBuffers::Message; end

    # nested messages
    class URI < ::ProtocolBuffers::Message
      required :string, :value, 1
      optional :bool, :executable, 2
    end

    repeated ::Mesos::CommandInfo::URI, :uris, 1
    optional ::Mesos::Environment, :environment, 2
    required :string, :value, 3
  end

  class ExecutorInfo < ::ProtocolBuffers::Message
    required ::Mesos::ExecutorID, :executor_id, 1
    optional ::Mesos::FrameworkID, :framework_id, 8
    required ::Mesos::CommandInfo, :command, 7
    repeated ::Mesos::Resource, :resources, 5
    optional :string, :name, 9
    optional :string, :source, 10
    optional :bytes, :data, 4
  end

  class MasterInfo < ::ProtocolBuffers::Message
    required :string, :id, 1
    required :uint32, :ip, 2
    required :uint32, :port, 3, :default => 5050
  end

  class SlaveInfo < ::ProtocolBuffers::Message
    required :string, :hostname, 1
    optional :int32, :port, 8, :default => 5051
    required :string, :webui_hostname, 2
    optional :int32, :webui_port, 4, :default => 8081
    repeated ::Mesos::Resource, :resources, 3
    repeated ::Mesos::Attribute, :attributes, 5
    optional ::Mesos::SlaveID, :id, 6
    optional :bool, :checkpoint, 7, :default => false
  end

  class Value < ::ProtocolBuffers::Message
    # forward declarations
    class Scalar < ::ProtocolBuffers::Message; end
    class Range < ::ProtocolBuffers::Message; end
    class Ranges < ::ProtocolBuffers::Message; end
    class Set < ::ProtocolBuffers::Message; end
    class Text < ::ProtocolBuffers::Message; end

    # enums
    module Type
      include ::ProtocolBuffers::Enum
      SCALAR = 0
      RANGES = 1
      SET = 2
      TEXT = 3
    end

    # nested messages
    class Scalar < ::ProtocolBuffers::Message
      required :double, :value, 1
    end

    class Range < ::ProtocolBuffers::Message
      required :uint64, :begin, 1
      required :uint64, :end, 2
    end

    class Ranges < ::ProtocolBuffers::Message
      repeated ::Mesos::Value::Range, :range, 1
    end

    class Set < ::ProtocolBuffers::Message
      repeated :string, :item, 1
    end

    class Text < ::ProtocolBuffers::Message
      required :string, :value, 1
    end

    required ::Mesos::Value::Type, :type, 1
    optional ::Mesos::Value::Scalar, :scalar, 2
    optional ::Mesos::Value::Ranges, :ranges, 3
    optional ::Mesos::Value::Set, :set, 4
    optional ::Mesos::Value::Text, :text, 5
  end

  class Attribute < ::ProtocolBuffers::Message
    required :string, :name, 1
    required ::Mesos::Value::Type, :type, 2
    optional ::Mesos::Value::Scalar, :scalar, 3
    optional ::Mesos::Value::Ranges, :ranges, 4
    optional ::Mesos::Value::Set, :set, 6
    optional ::Mesos::Value::Text, :text, 5
  end

  class Resource < ::ProtocolBuffers::Message
    required :string, :name, 1
    required ::Mesos::Value::Type, :type, 2
    optional ::Mesos::Value::Scalar, :scalar, 3
    optional ::Mesos::Value::Ranges, :ranges, 4
    optional ::Mesos::Value::Set, :set, 5
  end

  class ResourceStatistics < ::ProtocolBuffers::Message
    required :double, :timestamp, 1
    optional :double, :cpus_user_time_secs, 2
    optional :double, :cpus_system_time_secs, 3
    required :double, :cpus_limit, 4
    optional :uint64, :mem_rss_bytes, 5
    optional :uint64, :mem_limit_bytes, 6
  end

  class ResourceUsage < ::ProtocolBuffers::Message
    required ::Mesos::SlaveID, :slave_id, 1
    required ::Mesos::FrameworkID, :framework_id, 2
    optional ::Mesos::ExecutorID, :executor_id, 3
    optional :string, :executor_name, 4
    optional ::Mesos::TaskID, :task_id, 5
    optional ::Mesos::ResourceStatistics, :statistics, 6
  end

  class Request < ::ProtocolBuffers::Message
    optional ::Mesos::SlaveID, :slave_id, 1
    repeated ::Mesos::Resource, :resources, 2
  end

  class Offer < ::ProtocolBuffers::Message
    required ::Mesos::OfferID, :id, 1
    required ::Mesos::FrameworkID, :framework_id, 2
    required ::Mesos::SlaveID, :slave_id, 3
    required :string, :hostname, 4
    repeated ::Mesos::Resource, :resources, 5
    repeated ::Mesos::Attribute, :attributes, 7
    repeated ::Mesos::ExecutorID, :executor_ids, 6
  end

  class TaskInfo < ::ProtocolBuffers::Message
    required :string, :name, 1
    required ::Mesos::TaskID, :task_id, 2
    required ::Mesos::SlaveID, :slave_id, 3
    repeated ::Mesos::Resource, :resources, 4
    optional ::Mesos::ExecutorInfo, :executor, 5
    optional ::Mesos::CommandInfo, :command, 7
    optional :bytes, :data, 6
  end

  class TaskStatus < ::ProtocolBuffers::Message
    required ::Mesos::TaskID, :task_id, 1
    required ::Mesos::TaskState, :state, 2
    optional :string, :message, 4
    optional :bytes, :data, 3
  end

  class Filters < ::ProtocolBuffers::Message
    optional :double, :refuse_seconds, 1, :default => 5
  end

  class Environment < ::ProtocolBuffers::Message
    # forward declarations
    class Variable < ::ProtocolBuffers::Message; end

    # nested messages
    class Variable < ::ProtocolBuffers::Message
      required :string, :name, 1
      required :string, :value, 2
    end

    repeated ::Mesos::Environment::Variable, :variables, 1
  end

  class Parameter < ::ProtocolBuffers::Message
    required :string, :key, 1
    required :string, :value, 2
  end

  class Parameters < ::ProtocolBuffers::Message
    repeated ::Mesos::Parameter, :parameter, 1
  end

end
